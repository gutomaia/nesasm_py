import compiler
import ast
from inspect import getmembers
from pynes.asm import register_var

class PyNesVisitor(ast.NodeVisitor):

    def generic_visit(self, node, index = 0):
        for field, value in reversed(list(ast.iter_fields(node))):
            print value
            if isinstance(value, list):
                for item in value:
                    if isinstance(item, ast.AST):
                        self.visit(item)
            elif isinstance(value, ast.AST):
                self.visit(value)

    def visit_Assign(self, node):
        if (len(node.targets) == 1):
            register_var(node.targets[0].id, node.value.n)
        else:
            raise Exception('dammit')

    def visit_Add(self, node):
        self.generic_visit(node)
        print node

    def visit_BinOp(self, node):
        self.generic_visit(node)
        print 'BinOp'
        print type(node.left).__name__
        print node.left._fields
        print node.left
        print node.left.n

        a = getmembers(node.left)
        #print a

    def visit_Name(self, node):
        self.generic_visit(node)
        print node.id


_inesprog = 1
_ineschr = 1

def pynes_compiler(code, filename=None):
    python_land = ast.parse(code)
    turist = PyNesVisitor()
    turist.visit(python_land)
    #return turist.asm.bin
    return '''; Generated by Pynes
    CMP a, 80
    JNE notequal
    INC a
    JMP done
notequal:
    DEC a
done:'''